"""add_auth

Revision ID: fa4a59aac643
Revises: 0548f1aa4f10
Create Date: 2022-07-29 12:39:55.420225

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "fa4a59aac643"
down_revision = "fd4473bc1a10"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "auth_user",
        sa.Column(
            "pk", postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("password", sa.String(), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("override", sa.Boolean(), nullable=True),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.PrimaryKeyConstraint("pk"),
    )
    op.create_index(op.f("ix_auth_user_email"), "auth_user", ["email"], unique=True)
    op.create_table(
        "auth_api_token",
        sa.Column(
            "token",
            postgresql.UUID(as_uuid=True),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
        ),
        sa.Column("user_id", postgresql.UUID(), nullable=True),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["user_id"], ["auth_user.pk"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("token"),
    )
    op.create_table(
        "auth_mntner",
        sa.Column(
            "pk", postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("rpsl_mntner_pk", sa.String(), nullable=False),
        sa.Column("rpsl_mntner_obj_id", postgresql.UUID(), nullable=False),
        sa.Column("rpsl_mntner_source", sa.String(), nullable=False),
        sa.Column("migration_token", sa.String(), nullable=True),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["rpsl_mntner_obj_id"], ["rpsl_objects.pk"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("pk"),
        sa.UniqueConstraint(
            "rpsl_mntner_obj_id", "rpsl_mntner_source", name="auth_mntner_rpsl_mntner_obj_id_source_unique"
        ),
    )
    op.create_index(
        op.f("ix_auth_mntner_rpsl_mntner_obj_id"), "auth_mntner", ["rpsl_mntner_obj_id"], unique=True
    )
    op.create_index(op.f("ix_auth_mntner_rpsl_mntner_pk"), "auth_mntner", ["rpsl_mntner_pk"], unique=False)
    op.create_index(
        op.f("ix_auth_mntner_rpsl_mntner_source"), "auth_mntner", ["rpsl_mntner_source"], unique=False
    )
    op.create_table(
        "ChangeLog",
        sa.Column(
            "pk", postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("auth_by_user_id", postgresql.UUID(), nullable=True),
        sa.Column("auth_by_user_email", sa.String(), nullable=True),
        sa.Column("auth_by_mntner_id", postgresql.UUID(), nullable=True),
        sa.Column("auth_by_rpsl_mntner_pk", sa.String(), nullable=True),
        sa.Column("from_host_email", sa.String(), nullable=True),
        sa.Column("journal_entry", postgresql.UUID(), nullable=True),
        sa.Column("auth_by_api_key", postgresql.UUID(), nullable=True),
        # sa.Column('target_rpsl_origin', sa.Enum('unknown', 'mirror', 'synthetic_nrtm', 'pseudo_irr', 'auth_change', 'rpki_status', 'scope_filter', 'suspension', name='journalentryorigin'), nullable=True),
        sa.Column("target_rpsl_obj_id", postgresql.UUID(), nullable=True),
        sa.Column("target_rpsl_pk", sa.String(), nullable=True),
        sa.Column("target_rpsl_source", sa.String(), nullable=True),
        sa.Column("target_rpsl_object_class", sa.String(), nullable=True),
        sa.Column("target_rpsl_object_text", sa.Text(), nullable=True),
        sa.Column("journal_serial_nrtm", sa.Integer(), nullable=False),
        sa.Column("timestamp", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["auth_by_mntner_id"], ["auth_mntner.pk"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["auth_by_user_id"], ["auth_user.pk"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["journal_entry"], ["rpsl_database_journal.pk"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["target_rpsl_obj_id"], ["rpsl_objects.pk"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("pk"),
    )
    op.create_index(
        op.f("ix_ChangeLog_journal_serial_nrtm"), "ChangeLog", ["journal_serial_nrtm"], unique=False
    )
    op.create_index(op.f("ix_ChangeLog_target_rpsl_pk"), "ChangeLog", ["target_rpsl_pk"], unique=False)
    op.create_index(
        op.f("ix_ChangeLog_target_rpsl_source"), "ChangeLog", ["target_rpsl_source"], unique=False
    )
    op.create_table(
        "auth_permission",
        sa.Column(
            "pk", postgresql.UUID(as_uuid=True), server_default=sa.text("gen_random_uuid()"), nullable=False
        ),
        sa.Column("user_id", postgresql.UUID(), nullable=True),
        sa.Column("mntner_id", postgresql.UUID(), nullable=True),
        sa.Column("user_management", sa.Boolean(), nullable=True),
        sa.Column("created", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.ForeignKeyConstraint(["mntner_id"], ["auth_mntner.pk"], ondelete="RESTRICT"),
        sa.ForeignKeyConstraint(["user_id"], ["auth_user.pk"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("pk"),
        sa.UniqueConstraint("user_id", "mntner_id", name="auth_permission_user_mntner_unique"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("auth_permission")
    op.drop_index(op.f("ix_ChangeLog_target_rpsl_source"), table_name="ChangeLog")
    op.drop_index(op.f("ix_ChangeLog_target_rpsl_pk"), table_name="ChangeLog")
    op.drop_index(op.f("ix_ChangeLog_journal_serial_nrtm"), table_name="ChangeLog")
    op.drop_table("ChangeLog")
    op.drop_index(op.f("ix_auth_mntner_rpsl_mntner_source"), table_name="auth_mntner")
    op.drop_index(op.f("ix_auth_mntner_rpsl_mntner_pk"), table_name="auth_mntner")
    op.drop_index(op.f("ix_auth_mntner_rpsl_mntner_obj_id"), table_name="auth_mntner")
    op.drop_table("auth_mntner")
    op.drop_table("auth_api_token")
    op.drop_index(op.f("ix_auth_user_email"), table_name="auth_user")
    op.drop_table("auth_user")
    # ### end Alembic commands ###
